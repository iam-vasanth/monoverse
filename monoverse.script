# Copyright (c) 2025 iam-vasanth

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Initialize display settings
Window.SetBackgroundTopColor(0, 0, 0);
Window.SetBackgroundBottomColor(0, 0, 0);

# Get screen dimensions for responsive design
screen = {
    width: Window.GetWidth(),
    height: Window.GetHeight(),
    center_x: Window.GetWidth() / 2,
    center_y: Window.GetHeight() / 2
};

# ==================== LOGO SETUP ====================

brand_logo = {
    img: Image("images/arch.png")
};

brand_logo.width = brand_logo.img.GetWidth();
brand_logo.height = brand_logo.img.GetHeight();
brand_logo.x = screen.center_x - brand_logo.width / 2;
brand_logo.y = screen.center_y - brand_logo.height / 2 - screen.height * 0.05;

brand_logo.sprite = Sprite(brand_logo.img);
brand_logo.sprite.SetPosition(brand_logo.x, brand_logo.y, 1);

# ==================== PROGRESS BAR SETUP ====================

progressbar = {
    width: screen.width * 0.25,
    height: 3,
    bg_color_r: 0.2,
    bg_color_g: 0.2,
    bg_color_b: 0.2,
    fill_color_r: 1.0,
    fill_color_g: 1.0,
    fill_color_b: 1.0
};

progressbar.x = screen.center_x - progressbar.width / 2;
progressbar.y = brand_logo.y + brand_logo.height + screen.height * 0.02;

# Create background bar
progressbar.bg_img = Image.Box(progressbar.width, progressbar.height, 
                                progressbar.bg_color_r, progressbar.bg_color_g, progressbar.bg_color_b);
progressbar.bg = Sprite(progressbar.bg_img);
progressbar.bg.SetPosition(progressbar.x, progressbar.y, 5);
progressbar.bg.SetOpacity(0);

# Create fill bar (initially empty)
progressbar.fill = Sprite();
progressbar.fill.SetPosition(progressbar.x, progressbar.y, 6);
progressbar.fill.SetOpacity(0);

# ==================== PASSWORD BOX SETUP ====================

pass_box = {
    width: screen.width * 0.3,
    height: 40,
    border_thickness: 2,
    border_r: 1.0,
    border_g: 1.0,
    border_b: 1.0,
    active: 0
};

pass_box.x = screen.center_x - pass_box.width / 2;
pass_box.y = brand_logo.y + brand_logo.height + screen.height * 0.04;

# Initialize border sprites as null
pass_box.border_top = NULL;
pass_box.border_bottom = NULL;
pass_box.border_left = NULL;
pass_box.border_right = NULL;
pass_box.bullets_array = NULL;
pass_box.error_msg = NULL;

# ==================== STATE MANAGEMENT ====================

state = {
    mode: "normal",
    password_mode: 0
};

# ==================== BOOT PROGRESS HANDLER ====================

fun on_boot_progress(time, progress_value) {
    if (state.password_mode == 0) {
        progressbar.bg.SetOpacity(1);
        
        if (progress_value < 0) progress_value = 0;
        if (progress_value > 1) progress_value = 1;
        
        current_width = Math.Int(progressbar.width * progress_value);
        
        if (current_width > 0) {
            progressbar.fill_img = Image.Box(current_width, progressbar.height,
                                            progressbar.fill_color_r, progressbar.fill_color_g, progressbar.fill_color_b);
            progressbar.fill.SetImage(progressbar.fill_img);
            progressbar.fill.SetOpacity(1);
        }
    }
}

Plymouth.SetBootProgressFunction(on_boot_progress);

# ==================== PASSWORD PROMPT HANDLER ====================

fun on_password_prompt(prompt_text, bullet_count) {
    state.mode = "password";
    state.password_mode = 1;
    
    # Hide progress bar
    progressbar.bg.SetOpacity(0);
    progressbar.fill.SetOpacity(0);
    
    # Create border box
    pass_box.border_top = Sprite(Image.Box(pass_box.width, pass_box.border_thickness,
                                           pass_box.border_r, pass_box.border_g, pass_box.border_b));
    pass_box.border_top.SetPosition(pass_box.x, pass_box.y, 10);
    
    pass_box.border_bottom = Sprite(Image.Box(pass_box.width, pass_box.border_thickness,
                                              pass_box.border_r, pass_box.border_g, pass_box.border_b));
    pass_box.border_bottom.SetPosition(pass_box.x, pass_box.y + pass_box.height - pass_box.border_thickness, 10);
    
    pass_box.border_left = Sprite(Image.Box(pass_box.border_thickness, pass_box.height,
                                            pass_box.border_r, pass_box.border_g, pass_box.border_b));
    pass_box.border_left.SetPosition(pass_box.x, pass_box.y, 10);
    
    pass_box.border_right = Sprite(Image.Box(pass_box.border_thickness, pass_box.height,
                                             pass_box.border_r, pass_box.border_g, pass_box.border_b));
    pass_box.border_right.SetPosition(pass_box.x + pass_box.width - pass_box.border_thickness, pass_box.y, 10);
    
    # Create bullet characters
    bullet_char = Image.Text("â€¢", 1, 1, 1);
    bullet_spacing = 8;
    total_bullets_width = bullet_count * (bullet_char.GetWidth() + bullet_spacing);
    start_x = pass_box.x + (pass_box.width - total_bullets_width) / 2;
    bullet_y = pass_box.y + (pass_box.height - bullet_char.GetHeight()) / 2;
    
    pass_box.bullets_array = NULL;
    for (idx = 0; idx < bullet_count; idx++) {
        pass_box.bullets_array[idx] = Sprite(bullet_char);
        pass_box.bullets_array[idx].SetPosition(start_x + idx * (bullet_char.GetWidth() + bullet_spacing), bullet_y, 11);
    }
}

Plymouth.SetDisplayPasswordFunction(on_password_prompt);

# ==================== PASSWORD FAILED HANDLER ====================

fun on_password_failed(prompt_text) {
    # Display error message
    error_text = "Incorrect Password";
    error_img = Image.Text(error_text, 1.0, 0.2, 0.2);
    pass_box.error_msg = Sprite(error_img);
    
    msg_x = screen.center_x - error_img.GetWidth() / 2;
    msg_y = pass_box.y + pass_box.height + 15;
    
    pass_box.error_msg.SetPosition(msg_x, msg_y, 12);
}

Plymouth.SetDisplayFailedPasswordFunction(on_password_failed);

# ==================== NORMAL DISPLAY HANDLER ====================

fun on_normal_display() {
    state.mode = "normal";
    state.password_mode = 0;
    
    # Clear password box
    if (pass_box.border_top) pass_box.border_top.SetOpacity(0);
    if (pass_box.border_bottom) pass_box.border_bottom.SetOpacity(0);
    if (pass_box.border_left) pass_box.border_left.SetOpacity(0);
    if (pass_box.border_right) pass_box.border_right.SetOpacity(0);
    
    if (pass_box.bullets_array) {
        for (idx = 0; pass_box.bullets_array[idx]; idx++) {
            pass_box.bullets_array[idx].SetOpacity(0);
        }
    }
    
    if (pass_box.error_msg) {
        pass_box.error_msg.SetOpacity(0);
    }
    
    # Show progress bar
    progressbar.bg.SetOpacity(1);
    progressbar.fill.SetOpacity(1);
}

Plymouth.SetDisplayNormalFunction(on_normal_display);

# ==================== MESSAGE DISPLAY HANDLER ====================

messages = {
    list: [],
    count: 0,
    y_position: 10
};

fun on_message_display(msg_text) {
    msg_image = Image.Text(msg_text, 1, 1, 1);
    msg_sprite = Sprite(msg_image);
    msg_sprite.SetPosition(10, messages.y_position, 100);
    
    messages.list[messages.count] = {
        sprite: msg_sprite,
        text: msg_text
    };
    
    messages.count++;
    messages.y_position = messages.y_position + msg_image.GetHeight();
}

Plymouth.SetDisplayMessageFunction(on_message_display);

# ==================== MESSAGE HIDE HANDLER ====================

fun on_message_hide(msg_text) {
    for (idx = 0; idx < messages.count; idx++) {
        if (messages.list[idx].text == msg_text) {
            messages.list[idx].sprite.SetOpacity(0);
        }
    }
}

Plymouth.SetHideMessageFunction(on_message_hide);

# ==================== REFRESH ANIMATION ====================

animation = {
    pulsate_angle: 0.0,
    pulsate_min: 0.3,
    pulsate_speed: 0.5
};

fun on_refresh() {
    # Pulsating logo animation when not in boot mode
    if (Plymouth.GetMode() != "boot") {
        animation.pulsate_angle = animation.pulsate_angle + ((2 * 3.14159) / 50) * animation.pulsate_speed;
        
        opacity_value = (Math.Cos(animation.pulsate_angle) + 1) / 2;
        opacity_value = opacity_value * (1 - animation.pulsate_min) + animation.pulsate_min;
        
        brand_logo.sprite.SetOpacity(opacity_value);
    }
}

Plymouth.SetRefreshFunction(on_refresh);

# ==================== QUIT HANDLER ====================

fun on_quit() {
    brand_logo.sprite.SetOpacity(1);
}

Plymouth.SetQuitFunction(on_quit);